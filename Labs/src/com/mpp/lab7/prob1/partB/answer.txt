 Explain, in each case, what is  wrong with the solution. 
 Place each of your answers in a text file in the relevant package.
 
The problem with this solution is :-
When listsAreEqual() method check the equality of the two lists, 
it calls the method contains() implemented in ArrayList class.
The contains() method then calls indexOf() method. 
And the indexOf() method calls java.lang.Object equals() method 
which only checks both objects reference the same thing.

The class Employee has an overloading method 'equals()'.
So, the solution is to override java.lang.Object 'equals()' method 
to check the two instances have the same name and salary. 
And we should also override hashCode() method since equal objects has equal hashCode.

Modify Employee.java according to the below code

//	public boolean equals(Employee e) {
//		return e.name.equals(name) && e.salary == salary;
//	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + salary;
		return result;
	}
	
	/**
	 * An Employee instance is considered to be a duplicate of another Employee
	 * instance if the two instances have the same name and salary.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Employee))
			return false;
		Employee other = (Employee) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (salary != other.salary)
			return false;
		return true;
	}