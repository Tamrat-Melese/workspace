2.	Comparators. 
A.
If two Employee objects have the same name, what is the return value of compare?  
The return value of compare is zero if the Employee objects name are equal; 
compareTo returns 0 exactly when the equals(Object) method would return true.

This tells us that these Employee objects should be equal, but is this always true? 
No, it isn't

Example of two Employee objects having the same name but that should not be considered equal
new Employee("Joe", 100000)
new Employee("Joe", 50000)
The above two employees have the same name, 
but they are two different objects and have different salary.
So, the two employees should not be considered equal

The correct compare method
	@Override
	public int compare(Employee e1, Employee e2) {
		int result = e1.name.compareTo(e2.name);
		if (result != 0){			
			return result;
		}
		else {
			return Integer.compare(e1.salary, e2.salary);
		}
	}

B.
Corrected compare method
			@Override
			public int compare(Employee e1, Employee e2) {
				if (method == SortMethod.BYNAME) {
					int result = e1.name.compareTo(e2.name);
					if (result != 0){			
						return result;
					}
					else {
						return Integer.compare(e1.salary, e2.salary);
					}
				} else {
					int result = Integer.compare(e1.salary, e2.salary);
					if (result != 0){			
						return result;
					}
					else {
						return e1.name.compareTo(e2.name);
					}
				}
			}

C.
Corrected lambda expression compare method
		Collections.sort(emps, (e1, e2) -> {
			if (method == SortMethod.BYNAME) {
				int result = e1.name.compareTo(e2.name);
				if (result != 0){			
					return result;
				}
				else {
					return Integer.compare(e1.salary, e2.salary);
				}
			} else {
				int result = Integer.compare(e1.salary, e2.salary);
				if (result != 0){			
					return result;
				}
				else {
					return e1.name.compareTo(e2.name);
				}
			}
		});